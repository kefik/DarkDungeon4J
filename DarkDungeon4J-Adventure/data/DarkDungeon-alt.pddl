(define (domain DarkDungeon)
(:requirements :typing :negative-preconditions :conditional-effects)
(:types room item - object
        sword - item
)

(:predicates (hero_at ?r - room)
             (monster_at ?r - room)
             (trap_at ?r - room)
             ;(item_at ?i - item ?r - room)
             ;(carries ?i - item)
             (sword_at ?r - room)
             (has_sword)
             (empty_handed)
             (connected ?r1 ?r2 - room)
             (alive)
)

;(:action move
;:parameters (?r1 ?r2 - room)
;:precondition (and (alive)
;                   (connected ?r1 ?r2)
;                   (hero_at ?r1))
;:effect (and (not (hero_at ?r1))
;             (hero_at ?r2)
;             (when (and (empty_handed)(monster_at ?r2))(not (alive)))
;             (when (and (has_sword)(monster_at ?r2))(not (monster_at ?r2)))
;             (when (trap_at ?r1)(not (alive))))
;)

(:action move1
:parameters (?r1 ?r2 - room)
:precondition (and (alive)
                   (connected ?r1 ?r2)
                   (hero_at ?r1)
                   (not (monster_at ?r2))
                   (not (trap_at ?r1)))
:effect (and (not (hero_at ?r1))
             (hero_at ?r2))
             ;(when (trap_at ?r1)(not (alive))))
)

(:action move2
:parameters (?r1 ?r2 - room)
:precondition (and (alive)
                   (connected ?r1 ?r2)
                   (hero_at ?r1)
                   (monster_at ?r2)
                   (not (trap_at ?r1))
                   (has_sword))
:effect (and (not (hero_at ?r1))
             (hero_at ?r2)
             (not (monster_at ?r2)))
             ;(when (trap_at ?r1)(not (alive))))
)

;(:action move3
;:parameters (?r1 ?r2 - room)
;:precondition (and (alive)
;                   (connected ?r1 ?r2)
;                   (hero_at ?r1)
;                   (monster_at ?r2)
;                   (empty_handed))
;:effect (and (not (hero_at ?r1))
;             (hero_at ?r2)
;             (not (alive))
;             (when (trap_at ?r1)(not (alive))))
;)

(:action pickup_sword
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (sword_at ?r)
                   (not (trap_at ?r))
              )
:effect (and (not (sword_at ?r))
             (has_sword)
             (not (empty_handed))
            ; (when (trap_at ?r)(not (alive)))
        )
)

(:action drop_sword
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (has_sword)
                   (not (trap_at ?r))
                   (not (monster_at ?r))
              )
:effect (and (sword_at ?r)
             (not (has_sword))
             (empty_handed)
             ;(when (trap_at ?r)(not (alive)))
             ;(when (monster_at ?r)(not (alive)))
        )
)

(:action disarm
:parameters (?r - room)
:precondition (and (alive)
                   (hero_at ?r)
                   (trap_at ?r)
                   (not (has_sword))
              )
:effect (and (not (trap_at ?r)))
)

;(:action kill
;:parameters (?r - room)
;:precondition (and (alive)
;                   (hero_at ?r)
;                   (monster_at ?r)
;                   (has_sword)
;              )
;:effect (and (not (monster_at ?r))
;             (when (trap_at ?r)(not (alive)))
;               )
;)

)
